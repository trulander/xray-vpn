#!/usr/bin/env python3
"""
Xray VPN Server - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: VMess, VLESS, Trojan
–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã: WebSocket, gRPC
"""

import os
import sys
import argparse
import json
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config_generator import ConfigGenerator
from key_generator import KeyGenerator
from utils import setup_logging, check_dependencies, create_directories


def init_project(args: argparse.Namespace) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    
    domain = args.domain
    email = args.email or f"admin@{domain}"
    server_ip = args.server_ip
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Xray VPN Server...")
    print(f"üìã –î–æ–º–µ–Ω: {domain}")
    print(f"üìß Email: {email}")
    print(f"üåê IP —Å–µ—Ä–≤–µ—Ä–∞: {server_ip}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    create_directories()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    key_gen = KeyGenerator()
    config_gen = ConfigGenerator()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
    env_vars = config_gen.get_env_vars()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–º–µ–Ω, email –∏ IP —Å–µ—Ä–≤–µ—Ä–∞
    env_vars['domain'] = domain
    env_vars['email'] = email
    env_vars['server_ip'] = server_ip
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
    if not env_vars['vmess_uuid']:
        env_vars['vmess_uuid'] = key_gen.generate_uuid()
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω VMess UUID: {env_vars['vmess_uuid']}")
    
    if not env_vars['vless_uuid']:
        env_vars['vless_uuid'] = key_gen.generate_uuid()
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω VLESS UUID: {env_vars['vless_uuid']}")
    
    if not env_vars['trojan_password']:
        env_vars['trojan_password'] = key_gen.generate_trojan_password()
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Trojan –ø–∞—Ä–æ–ª—å: {env_vars['trojan_password']}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
    if not env_vars['vmess_ws_path'] or env_vars['vmess_ws_path'] == '/vmess/ws':
        env_vars['vmess_ws_path'] = key_gen.generate_ws_path('vmess')
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω VMess WS –ø—É—Ç—å: {env_vars['vmess_ws_path']}")
    
    if not env_vars['vless_ws_path'] or env_vars['vless_ws_path'] == '/vless/ws':
        env_vars['vless_ws_path'] = key_gen.generate_ws_path('vless')
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω VLESS WS –ø—É—Ç—å: {env_vars['vless_ws_path']}")
    
    if not env_vars['trojan_ws_path'] or env_vars['trojan_ws_path'] == '/trojan/ws':
        env_vars['trojan_ws_path'] = key_gen.generate_ws_path('trojan')
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Trojan WS –ø—É—Ç—å: {env_vars['trojan_ws_path']}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º gRPC —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
    if not env_vars['vmess_grpc_service'] or env_vars['vmess_grpc_service'] == 'VmessService':
        env_vars['vmess_grpc_service'] = key_gen.generate_grpc_service_name('vmess')
        env_vars['vmess_grpc_path'] = key_gen.generate_grpc_path(env_vars['vmess_grpc_service'])
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω VMess gRPC —Å–µ—Ä–≤–∏—Å: {env_vars['vmess_grpc_service']}")
    
    if not env_vars['vless_grpc_service'] or env_vars['vless_grpc_service'] == 'VlessService':
        env_vars['vless_grpc_service'] = key_gen.generate_grpc_service_name('vless')
        env_vars['vless_grpc_path'] = key_gen.generate_grpc_path(env_vars['vless_grpc_service'])
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω VLESS gRPC —Å–µ—Ä–≤–∏—Å: {env_vars['vless_grpc_service']}")
    
    if not env_vars['trojan_grpc_service'] or env_vars['trojan_grpc_service'] == 'TrojanService':
        env_vars['trojan_grpc_service'] = key_gen.generate_grpc_service_name('trojan')
        env_vars['trojan_grpc_path'] = key_gen.generate_grpc_path(env_vars['trojan_grpc_service'])
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Trojan gRPC —Å–µ—Ä–≤–∏—Å: {env_vars['trojan_grpc_service']}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
    if not env_vars['secret_config_path'] or env_vars['secret_config_path'] == '/secret/configs':
        env_vars['secret_config_path'] = key_gen.generate_secret_path()
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å: {env_vars['secret_config_path']}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    env_content = config_gen.env.get_template('env_multi.j2').render(**env_vars)
    
    env_path = '/app/workspace/.env' if Path('/app/workspace').exists() else '.env'
    with open(env_path, 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º ConfigGenerator
    config_gen.reload_env_vars()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    config_gen.generate_all_configs()
    print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"\nüìã –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞: {domain}")
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   docker-compose up -d")


def generate_configs(args: argparse.Namespace) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    
    print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
    
    config_gen = ConfigGenerator()
    config_gen.generate_all_configs()
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫–µ config/")


def generate_client_config(args: argparse.Namespace) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    config_gen = ConfigGenerator()
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        client_config = config_gen.generate_client_config(
            protocol=args.protocol,
            transport=args.transport
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        config_dir = Path('config/client')
        config_dir.mkdir(parents=True, exist_ok=True)
        
        filename = f'{args.protocol}_{args.transport}.json'
        filepath = config_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(client_config)
        
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if args.url:
            try:
                if args.protocol == 'vless':
                    url = config_gen.generate_vless_url(transport=args.transport)
                elif args.protocol == 'vmess':
                    url = config_gen.generate_vmess_url(transport=args.transport)
                elif args.protocol == 'trojan':
                    url = config_gen.generate_trojan_url(transport=args.transport)
                else:
                    raise ValueError(f"URL –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {args.protocol}")
                
                print(f"\nüì± URL –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
                print(url)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL –≤ —Ñ–∞–π–ª
                url_file = config_dir / f'{args.protocol}_{args.transport}_url.txt'
                with open(url_file, 'w', encoding='utf-8') as f:
                    f.write(url)
                
                print(f"‚úÖ URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {url_file}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


def show_status(args: argparse.Namespace) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    
    print("üìä –°—Ç–∞—Ç—É—Å Xray VPN Server")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_files = [
        'config/xray/config.json',
        'config/nginx/nginx.conf',
        'config/nginx/demo-site.conf',
        '.env'
    ]
    
    print("\nüìÅ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for file_path in config_files:
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    client_dir = Path('config/client')
    if client_dir.exists():
        client_configs = list(client_dir.glob('*.json'))
        print(f"\nüë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({len(client_configs)}):")
        for config_file in client_configs:
            print(f"  ‚úÖ {config_file.name}")
    else:
        print("\nüë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config_gen = ConfigGenerator()
    env_vars = config_gen.get_env_vars()
    
    print("\nüîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  –î–æ–º–µ–Ω: {env_vars['domain']}")
    print(f"  IP —Å–µ—Ä–≤–µ—Ä–∞: {env_vars['server_ip']}")
    print(f"  Email: {env_vars['email']}")
    print(f"  –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {env_vars['log_level']}")
    
    print("\nüîë –ü—Ä–æ—Ç–æ–∫–æ–ª—ã:")
    print(f"  VMess UUID: {env_vars['vmess_uuid'][:8]}...")
    print(f"  VLESS UUID: {env_vars['vless_uuid'][:8]}...")
    print(f"  Trojan –ø–∞—Ä–æ–ª—å: {env_vars['trojan_password'][:8]}...")


def show_ssl_status(args: argparse.Namespace) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    
    print("üîí –°—Ç–∞—Ç—É—Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    print("=" * 50)
    
    config_gen = ConfigGenerator()
    env_vars = config_gen.get_env_vars()
    domain = env_vars['domain']
    
    ssl_dir = Path(f'data/ssl/live/{domain}')
    
    if ssl_dir.exists():
        cert_files = ['fullchain.pem', 'privkey.pem', 'cert.pem', 'chain.pem']
        
        print(f"\nüìÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}:")
        for cert_file in cert_files:
            cert_path = ssl_dir / cert_file
            if cert_path.exists():
                print(f"  ‚úÖ {cert_file}")
            else:
                print(f"  ‚ùå {cert_file}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        cert_path = ssl_dir / 'cert.pem'
        if cert_path.exists():
            try:
                import subprocess
                result = subprocess.run([
                    'openssl', 'x509', '-in', str(cert_path), '-noout', '-dates'
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(f"\nüìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:")
                    for line in result.stdout.strip().split('\n'):
                        print(f"  {line}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
    else:
        print(f"\n‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"docker-compose --profile tools run --rm certbot certonly --webroot -w /var/www/html -d {domain}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    parser = argparse.ArgumentParser(
        description='Xray VPN Server - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python -m src.main init                           # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  python -m src.main generate                       # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  python -m src.main generate-client vless ws       # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VLESS WebSocket
  python -m src.main generate-client vmess grpc -u  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VMess gRPC —Å URL
  python -m src.main status                         # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  python -m src.main ssl-status                     # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å SSL
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ init
    init_parser = subparsers.add_parser('init', help='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞')
    init_parser.add_argument('--domain', required=True, help='–î–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: vpn.example.com)')
    init_parser.add_argument('--email', help='Email –¥–ª—è Let\'s Encrypt (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin@–¥–æ–º–µ–Ω)')
    init_parser.add_argument('--server-ip', '-i', required=True, help='IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ generate
    generate_parser = subparsers.add_parser('generate', help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ generate-client
    client_parser = subparsers.add_parser('generate-client', help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    client_parser.add_argument('protocol', choices=['vmess', 'vless', 'trojan'], help='–ü—Ä–æ—Ç–æ–∫–æ–ª')
    client_parser.add_argument('transport', choices=['ws', 'grpc'], help='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
    client_parser.add_argument('-u', '--url', action='store_true', help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    status_parser = subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ ssl-status
    ssl_parser = subparsers.add_parser('ssl-status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    if args.command == 'init':
        init_project(args)
    elif args.command == 'generate':
        generate_configs(args)
    elif args.command == 'generate-client':
        generate_client_config(args)
    elif args.command == 'status':
        show_status(args)
    elif args.command == 'ssl-status':
        show_ssl_status(args)


if __name__ == '__main__':
    main() 